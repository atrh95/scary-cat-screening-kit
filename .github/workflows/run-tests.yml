name: Run Tests

on:
  workflow_call:
    outputs:
      test_result:
        description: "Test Result"
        value: ${{ jobs.unit-test.outputs.test_result }}

jobs:
  unit-test:
    runs-on: macos-latest
    env:
      MINT_PATH: ${{ github.workspace }}/.mint
    outputs:
      test_result: ${{ steps.process_test_results.outputs.result }}
    steps:
    - uses: actions/checkout@v4

    - name: Cache Mint packages
      uses: actions/cache@v4
      id: cache-mint-packages
      with:
        path: ${{ env.MINT_PATH }}
        key: ${{ runner.os }}-mint-${{ hashFiles('**/Mintfile') }}
        restore-keys: |
          ${{ runner.os }}-mint-

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.2'

    - name: Install Mint
      run: brew install mint
      
    - name: Generate Xcode Project
      run: mint run xcodegen generate

    - name: Generate Core ML Models
      run: |
        echo "Generating Core ML models..."
        # Compile each model in the same directory
        xcrun coremlcompiler compile Sources/OvRModels/ScaryCatScreeningML_OvR_black_and_white_v22.mlmodel Sources/OvRModels/
        xcrun coremlcompiler compile Sources/OvRModels/ScaryCatScreeningML_OvR_human_hands_detected_v22.mlmodel Sources/OvRModels/
        xcrun coremlcompiler compile Sources/OvRModels/ScaryCatScreeningML_OvR_mouth_open_v22.mlmodel Sources/OvRModels/
        xcrun coremlcompiler compile Sources/OvRModels/ScaryCatScreeningML_OvR_sphynx_v22.mlmodel Sources/OvRModels/
        
        echo "Core ML models generation completed"
        ls -la Sources/OvRModels/*.mlmodelc

    - name: Create Test Output Directories
      run: mkdir -p ci-outputs/test-results/unit
        
    - name: Make find-simulator script executable
      run: chmod +x .github/scripts/find-simulator.sh

    - name: Select Simulator
      id: select_simulator
      run: |
        SIMULATOR_ID=$(./.github/scripts/find-simulator.sh)
        echo "シミュレータ ID ($SIMULATOR_ID) が選択されました"
        echo "simulator_id=$SIMULATOR_ID" >> $GITHUB_OUTPUT

    - name: Run Unit Tests
      id: unit_tests
      env:
        TZ: Asia/Tokyo
      run: |
        set -o pipefail
        echo "シミュレータ ID (${{ steps.select_simulator.outputs.simulator_id }}) を使用してユニットテストを実行します"
        xcodebuild test \
          -project "SampleApp.xcodeproj" \
          -scheme "ScaryCatScreeningKitTests" \
          -destination "platform=iOS Simulator,id=${{ steps.select_simulator.outputs.simulator_id }}" \
          -configuration Debug \
          -enableCodeCoverage NO \
          CODE_SIGNING_ALLOWED=NO \
          -resultBundlePath ./ci-outputs/test-results/unit/TestResults.xcresult \
          | xcbeautify --report junit --report-path ./ci-outputs/test-results/unit/junit.xml
            
        ls -la ./ci-outputs/test-results/unit/
      continue-on-error: true

    - name: Process Test Results
      id: process_test_results
      if: always()
      run: |
        RESULT_BUNDLE_PATH="./ci-outputs/test-results/unit/TestResults.xcresult"
        if [ ! -d "$RESULT_BUNDLE_PATH" ]; then
          echo "❌ Error: Test results not found at $RESULT_BUNDLE_PATH"
          echo "result=failure" >> $GITHUB_OUTPUT
          exit 0
        fi

        # xcresulttoolを使用してテスト結果を解析
        TEST_SUMMARY=$(xcrun xcresulttool get --format json --path "$RESULT_BUNDLE_PATH" | jq -r '.actions._values[0].actionResult.testsRef.summaryRef.summary')
        
        if [ "$TEST_SUMMARY" = "null" ]; then
          echo "❌ Error: Failed to parse test results"
          echo "result=failure" >> $GITHUB_OUTPUT
          exit 0
        fi

        # テスト結果の判定
        if [[ "$TEST_SUMMARY" == *"failureCount\":0"* ]]; then
          echo "✅ All tests passed"
          echo "result=success" >> $GITHUB_OUTPUT
        else
          echo "❌ Some tests failed"
          echo "result=failure" >> $GITHUB_OUTPUT
        fi

    - name: Upload Unit Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: unit-test-results-${{ github.run_id }}
        path: ci-outputs/test-results/unit
        retention-days: 7

  report-status:
    needs: [unit-test]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Report Test Status
        run: |
          if [[ "${{ needs.unit-test.outputs.test_result }}" == "success" ]]; then
            echo "✅ Unit tests completed successfully"
          else
            echo "❌ Unit tests failed"
          fi 